from flask import jsonify
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from typing import Dict, List, Optional, Tuple
import warnings
warnings.filterwarnings('ignore')


def function_three():
    """
    Esta funci√≥n crea una instancia de la clase CalculadoraPrestamos y ejecuta su men√∫ principal.
    """
    calculadora = CalculadoraPrestamos()
    calculadora.menu_principal()

class CalculadoraPrestamos:
    """
    Clase principal para an√°lisis de pr√©stamos con c√°lculos de inter√©s compuesto.
    
    Esta clase maneja la lectura, procesamiento y an√°lisis de datos de pr√©stamos,
    incluyendo c√°lculos de inter√©s compuesto, escenarios de simulaci√≥n y
    visualizaciones.
    """
    
    def __init__(self, archivo_csv: str = "loan_data.csv"):
        """
        Inicializa la calculadora de pr√©stamos.
        
        Args:
            archivo_csv (str): Ruta al archivo CSV con datos de pr√©stamos
        """
        self.archivo_csv = archivo_csv
        self.datos = None
        self.resultados = None
        self.inflacion_anual = 0.03  # 3% inflaci√≥n anual Colombia
        
    def cargar_datos(self) -> bool:
        """
        Carga los datos del archivo CSV y muestra informaci√≥n b√°sica.
        
        Returns:
            bool: True si la carga fue exitosa, False en caso contrario
        """
        try:
            self.datos = pd.read_csv(self.archivo_csv)
            print("=" * 60)
            print("üìä DATOS DE PR√âSTAMOS CARGADOS EXITOSAMENTE")
            print("=" * 60)
            print(f"N√∫mero total de pr√©stamos: {len(self.datos)}")
            print(f"Columnas disponibles: {list(self.datos.columns)}")
            print("\nüìà ESTAD√çSTICAS DESCRIPTIVAS:")
            print("-" * 40)
            
            # Estad√≠sticas del monto del pr√©stamo
            monto_stats = self.datos['Monto_Prestamo'].describe()
            print(f"Monto promedio: ${monto_stats['mean']:,.0f}")
            print(f"Monto mediano: ${monto_stats['50%']:,.0f}")
            print(f"Monto m√≠nimo: ${monto_stats['min']:,.0f}")
            print(f"Monto m√°ximo: ${monto_stats['max']:,.0f}")
            
            # Estad√≠sticas de tasa de inter√©s
            tasa_stats = self.datos['Tasa_Interes_Anual'].describe()
            print(f"\nTasa promedio: {tasa_stats['mean']:.2f}%")
            print(f"Tasa mediana: {tasa_stats['50%']:.2f}%")
            print(f"Tasa m√≠nima: {tasa_stats['min']:.2f}%")
            print(f"Tasa m√°xima: {tasa_stats['max']:.2f}%")
            
            # Estad√≠sticas de tiempo
            tiempo_stats = self.datos['Tiempo_Meses'].describe()
            print(f"\nTiempo promedio: {tiempo_stats['mean']:.0f} meses")
            print(f"Tiempo mediano: {tiempo_stats['50%']:.0f} meses")
            print(f"Tiempo m√≠nimo: {tiempo_stats['min']:.0f} meses")
            print(f"Tiempo m√°ximo: {tiempo_stats['max']:.0f} meses")
            
            # Distribuci√≥n por prop√≥sito
            print(f"\nüìã DISTRIBUCI√ìN POR PROP√ìSITO:")
            print("-" * 40)
            proposito_count = self.datos['Proposito'].value_counts()
            for proposito, count in proposito_count.items():
                print(f"{proposito}: {count} pr√©stamos")
            
            return True
            
        except FileNotFoundError:
            print(f"‚ùå Error: No se pudo encontrar el archivo '{self.archivo_csv}'")
            return False
        except Exception as e:
            print(f"‚ùå Error al cargar los datos: {str(e)}")
            return False
    
    def calcular_interes_compuesto(self, principal: float, tasa_anual: float, 
                                 tiempo_meses: int, frecuencia: int = 12) -> Dict:
        """
        Calcula el inter√©s compuesto usando la f√≥rmula A = P(1 + r/n)^(nt)
        
        Args:
            principal (float): Monto inicial del pr√©stamo
            tasa_anual (float): Tasa de inter√©s anual (en porcentaje)
            tiempo_meses (int): Tiempo en meses
            frecuencia (int): Frecuencia de capitalizaci√≥n por a√±o (12=mensual, 4=trimestral, etc.)
            
        Returns:
            Dict: Diccionario con los resultados del c√°lculo
        """
        # Convertir tasa de porcentaje a decimal
        r = tasa_anual / 100
        
        # Convertir tiempo a a√±os
        t = tiempo_meses / 12
        
        # Calcular monto final con inter√©s compuesto
        monto_final = principal * (1 + r/frecuencia) ** (frecuencia * t)
        
        # Calcular inter√©s total
        interes_total = monto_final - principal
        
        # Calcular inter√©s simple para comparaci√≥n
        interes_simple = principal * r * t
        monto_simple = principal + interes_simple
        
        # Diferencia entre compuesto y simple
        diferencia = interes_total - interes_simple
        
        return {
            'principal': principal,
            'tasa_anual': tasa_anual,
            'tiempo_meses': tiempo_meses,
            'tiempo_a√±os': t,
            'frecuencia': frecuencia,
            'monto_final': monto_final,
            'interes_total': interes_total,
            'interes_simple': interes_simple,
            'monto_simple': monto_simple,
            'diferencia_compuesto_simple': diferencia,
            'frecuencia_nombre': self._obtener_nombre_frecuencia(frecuencia)
        }
    
    def _obtener_nombre_frecuencia(self, frecuencia: int) -> str:
        """Convierte la frecuencia num√©rica a nombre descriptivo."""
        nombres = {1: 'Anual', 2: 'Semestral', 4: 'Trimestral', 12: 'Mensual', 52: 'Semanal', 365: 'Diario'}
        return nombres.get(frecuencia, f'{frecuencia} veces por a√±o')
    
    def calcular_pago_mensual(self, principal: float, tasa_anual: float, tiempo_meses: int) -> float:
        """
        Calcula el pago mensual usando la f√≥rmula PMT.
        
        Args:
            principal (float): Monto del pr√©stamo
            tasa_anual (float): Tasa de inter√©s anual
            tiempo_meses (int): Tiempo en meses
            
        Returns:
            float: Pago mensual
        """
        if tasa_anual == 0:
            return principal / tiempo_meses
        
        tasa_mensual = tasa_anual / 100 / 12
        pago_mensual = principal * (tasa_mensual * (1 + tasa_mensual) ** tiempo_meses) / \
                      ((1 + tasa_mensual) ** tiempo_meses - 1)
        
        return pago_mensual
    
    def analizar_todos_prestamos(self) -> pd.DataFrame:
        """
        Analiza todos los pr√©stamos del dataset y calcula m√©tricas clave.
        
        Returns:
            pd.DataFrame: DataFrame con an√°lisis completo de todos los pr√©stamos
        """
        if self.datos is None:
            print("‚ùå Primero debe cargar los datos")
            return None
        
        resultados = []
        
        for index, row in self.datos.iterrows():
            # Calcular inter√©s compuesto
            calculo = self.calcular_interes_compuesto(
                row['Monto_Prestamo'], 
                row['Tasa_Interes_Anual'], 
                row['Tiempo_Meses']
            )
            
            # Calcular pago mensual
            pago_mensual = self.calcular_pago_mensual(
                row['Monto_Prestamo'], 
                row['Tasa_Interes_Anual'], 
                row['Tiempo_Meses']
            )
            
            # Calcular costo total
            costo_total = pago_mensual * row['Tiempo_Meses']
            
            # Crear registro de resultados
            resultado = {
                'Nombre': row['Nombre'],
                'Edad': row['Edad'],
                'Proposito': row['Proposito'],
                'Monto_Original': row['Monto_Prestamo'],
                'Tasa_Interes': row['Tasa_Interes_Anual'],
                'Tiempo_Meses': row['Tiempo_Meses'],
                'Pago_Mensual': pago_mensual,
                'Costo_Total': costo_total,
                'Interes_Total': costo_total - row['Monto_Prestamo'],
                'Monto_Final_Compuesto': calculo['monto_final'],
                'Diferencia_Simple_Compuesto': calculo['diferencia_compuesto_simple'],
                'Porcentaje_Interes': (costo_total - row['Monto_Prestamo']) / row['Monto_Prestamo'] * 100
            }
            
            resultados.append(resultado)
        
        self.resultados = pd.DataFrame(resultados)
        return self.resultados
    
    def mostrar_ejemplos_detallados(self, n_ejemplos: int = 3):
        """
        Muestra c√°lculos paso a paso para los primeros n pr√©stamos.
        
        Args:
            n_ejemplos (int): N√∫mero de ejemplos a mostrar
        """
        if self.datos is None:
            print("‚ùå Primero debe cargar los datos")
            return
        
        print("=" * 80)
        print("üîç EJEMPLOS DE C√ÅLCULOS PASO A PASO")
        print("=" * 80)
        
        for i in range(min(n_ejemplos, len(self.datos))):
            row = self.datos.iloc[i]
            print(f"\nüìã EJEMPLO {i+1}: {row['Nombre']}")
            print("-" * 60)
            
            # Datos del pr√©stamo
            print(f"Prop√≥sito: {row['Proposito']}")
            print(f"Monto del pr√©stamo: ${row['Monto_Prestamo']:,.0f}")
            print(f"Tasa de inter√©s anual: {row['Tasa_Interes_Anual']}%")
            print(f"Tiempo: {row['Tiempo_Meses']} meses ({row['Tiempo_Meses']/12:.1f} a√±os)")
            
            # C√°lculos paso a paso
            calculo = self.calcular_interes_compuesto(
                row['Monto_Prestamo'], 
                row['Tasa_Interes_Anual'], 
                row['Tiempo_Meses']
            )
            
            print("\nüßÆ C√ÅLCULOS:")
            print(f"F√≥rmula: A = P(1 + r/n)^(nt)")
            print(f"Donde:")
            print(f"  P = ${calculo['principal']:,.0f} (principal)")
            print(f"  r = {calculo['tasa_anual']/100:.4f} (tasa decimal)")
            print(f"  n = {calculo['frecuencia']} (capitalizaci√≥n mensual)")
            print(f"  t = {calculo['tiempo_a√±os']:.2f} a√±os")
            
            print(f"\nResultado:")
            print(f"  A = ${calculo['principal']:,.0f} √ó (1 + {calculo['tasa_anual']/100:.4f}/12)^(12 √ó {calculo['tiempo_a√±os']:.2f})")
            print(f"  A = ${calculo['monto_final']:,.0f}")
            
            # Pago mensual
            pago_mensual = self.calcular_pago_mensual(
                row['Monto_Prestamo'], 
                row['Tasa_Interes_Anual'], 
                row['Tiempo_Meses']
            )
            
            print(f"\nüí∞ RESULTADOS FINANCIEROS:")
            print(f"  Pago mensual: ${pago_mensual:,.0f}")
            print(f"  Costo total: ${pago_mensual * row['Tiempo_Meses']:,.0f}")
            print(f"  Inter√©s total: ${(pago_mensual * row['Tiempo_Meses']) - row['Monto_Prestamo']:,.0f}")
            print(f"  Porcentaje de inter√©s: {((pago_mensual * row['Tiempo_Meses']) - row['Monto_Prestamo']) / row['Monto_Prestamo'] * 100:.1f}%")
            
            # Comparaci√≥n con inter√©s simple
            print(f"\nüìä COMPARACI√ìN CON INTER√âS SIMPLE:")
            print(f"  Inter√©s simple: ${calculo['interes_simple']:,.0f}")
            print(f"  Inter√©s compuesto: ${calculo['interes_total']:,.0f}")
            print(f"  Diferencia: ${calculo['diferencia_compuesto_simple']:,.0f}")
    
    def escenario_que_pasaria_si(self, cambios_tasa: List[float] = [-2, -1, 1, 2]):
        """
        Simula cambios en las tasas de inter√©s para todos los pr√©stamos.
        
        Args:
            cambios_tasa (List[float]): Lista de cambios en puntos porcentuales
        """
        if self.datos is None:
            print("‚ùå Primero debe cargar los datos")
            return
        
        print("=" * 80)
        print("üîÆ AN√ÅLISIS DE ESCENARIOS: '¬øQU√â PASAR√çA SI?'")
        print("=" * 80)
        
        resultados_escenarios = []
        
        for index, row in self.datos.iterrows():
            tasa_original = row['Tasa_Interes_Anual']
            pago_original = self.calcular_pago_mensual(
                row['Monto_Prestamo'], tasa_original, row['Tiempo_Meses']
            )
            costo_original = pago_original * row['Tiempo_Meses']
            
            escenario = {
                'Nombre': row['Nombre'],
                'Tasa_Original': tasa_original,
                'Costo_Original': costo_original
            }
            
            for cambio in cambios_tasa:
                nueva_tasa = max(0.1, tasa_original + cambio)  # M√≠nimo 0.1%
                nuevo_pago = self.calcular_pago_mensual(
                    row['Monto_Prestamo'], nueva_tasa, row['Tiempo_Meses']
                )
                nuevo_costo = nuevo_pago * row['Tiempo_Meses']
                diferencia = nuevo_costo - costo_original
                
                escenario[f'Tasa_{cambio:+.0f}%'] = nueva_tasa
                escenario[f'Costo_{cambio:+.0f}%'] = nuevo_costo
                escenario[f'Diferencia_{cambio:+.0f}%'] = diferencia
            
            resultados_escenarios.append(escenario)
        
        df_escenarios = pd.DataFrame(resultados_escenarios)
        
        # Mostrar resumen
        print("\nüìä RESUMEN DE IMPACTO PROMEDIO:")
        print("-" * 50)
        for cambio in cambios_tasa:
            impacto_promedio = df_escenarios[f'Diferencia_{cambio:+.0f}%'].mean()
            print(f"Cambio de {cambio:+.0f}%: ${impacto_promedio:+,.0f} promedio")
        
        # Mostrar los 5 pr√©stamos m√°s afectados
        print(f"\nüéØ TOP 5 PR√âSTAMOS M√ÅS AFECTADOS POR AUMENTO DE +2%:")
        print("-" * 60)
        top_afectados = df_escenarios.nlargest(5, 'Diferencia_+2%')
        for _, row in top_afectados.iterrows():
            print(f"{row['Nombre']}: ${row['Diferencia_+2%']:+,.0f}")
        
        return df_escenarios
    
    def escenario_prepago(self, porcentaje_prepago: float = 0.10):
        """
        Calcula el ahorro si se hacen pagos adicionales.
        
        Args:
            porcentaje_prepago (float): Porcentaje adicional a pagar mensualmente
        """
        if self.datos is None:
            print("‚ùå Primero debe cargar los datos")
            return
        
        print("=" * 80)
        print(f"üí∞ ESCENARIO DE PREPAGO ({porcentaje_prepago*100:.0f}% ADICIONAL MENSUAL)")
        print("=" * 80)
        
        resultados_prepago = []
        
        for index, row in self.datos.iterrows():
            # Pago normal
            pago_normal = self.calcular_pago_mensual(
                row['Monto_Prestamo'], row['Tasa_Interes_Anual'], row['Tiempo_Meses']
            )
            costo_normal = pago_normal * row['Tiempo_Meses']
            
            # Pago con prepago
            pago_con_prepago = pago_normal * (1 + porcentaje_prepago)
            
            # Calcular nuevo tiempo y costo con prepago
            principal = row['Monto_Prestamo']
            tasa_mensual = row['Tasa_Interes_Anual'] / 100 / 12
            
            # Simular pagos con prepago
            saldo = principal
            mes = 0
            while saldo > 0 and mes < row['Tiempo_Meses']:
                interes_mes = saldo * tasa_mensual
                principal_mes = min(pago_con_prepago - interes_mes, saldo)
                saldo -= principal_mes
                mes += 1
            
            costo_con_prepago = pago_con_prepago * mes
            ahorro = costo_normal - costo_con_prepago
            ahorro_tiempo = row['Tiempo_Meses'] - mes
            
            resultado = {
                'Nombre': row['Nombre'],
                'Pago_Normal': pago_normal,
                'Pago_Con_Prepago': pago_con_prepago,
                'Tiempo_Normal': row['Tiempo_Meses'],
                'Tiempo_Con_Prepago': mes,
                'Costo_Normal': costo_normal,
                'Costo_Con_Prepago': costo_con_prepago,
                'Ahorro_Dinero': ahorro,
                'Ahorro_Tiempo_Meses': ahorro_tiempo
            }
            
            resultados_prepago.append(resultado)
        
        df_prepago = pd.DataFrame(resultados_prepago)
        
        # Mostrar resumen
        print(f"\nüìä RESUMEN DE AHORROS:")
        print("-" * 40)
        ahorro_promedio = df_prepago['Ahorro_Dinero'].mean()
        tiempo_promedio = df_prepago['Ahorro_Tiempo_Meses'].mean()
        print(f"Ahorro promedio: ${ahorro_promedio:,.0f}")
        print(f"Tiempo ahorrado promedio: {tiempo_promedio:.1f} meses")
        
        # Top 5 ahorros
        print(f"\nüéØ TOP 5 MAYORES AHORROS:")
        print("-" * 40)
        top_ahorros = df_prepago.nlargest(5, 'Ahorro_Dinero')
        for _, row in top_ahorros.iterrows():
            print(f"{row['Nombre']}: ${row['Ahorro_Dinero']:,.0f} ({row['Ahorro_Tiempo_Meses']:.0f} meses)")
        
        return df_prepago
    
    def escenario_refinanciamiento(self, nueva_tasa: float = 3.5):
        """
        Compara el pr√©stamo actual vs refinanciamiento con nueva tasa.
        
        Args:
            nueva_tasa (float): Nueva tasa de inter√©s para refinanciamiento
        """
        if self.datos is None:
            print("‚ùå Primero debe cargar los datos")
            return
        
        print("=" * 80)
        print(f"üîÑ AN√ÅLISIS DE REFINANCIAMIENTO (Nueva tasa: {nueva_tasa}%)")
        print("=" * 80)
        
        resultados_refi = []
        
        for index, row in self.datos.iterrows():
            # Costo actual
            pago_actual = self.calcular_pago_mensual(
                row['Monto_Prestamo'], row['Tasa_Interes_Anual'], row['Tiempo_Meses']
            )
            costo_actual = pago_actual * row['Tiempo_Meses']
            
            # Costo con refinanciamiento
            pago_nuevo = self.calcular_pago_mensual(
                row['Monto_Prestamo'], nueva_tasa, row['Tiempo_Meses']
            )
            costo_nuevo = pago_nuevo * row['Tiempo_Meses']
            
            ahorro = costo_actual - costo_nuevo
            porcentaje_ahorro = (ahorro / costo_actual) * 100
            
            resultado = {
                'Nombre': row['Nombre'],
                'Tasa_Actual': row['Tasa_Interes_Anual'],
                'Tasa_Nueva': nueva_tasa,
                'Pago_Actual': pago_actual,
                'Pago_Nuevo': pago_nuevo,
                'Costo_Actual': costo_actual,
                'Costo_Nuevo': costo_nuevo,
                'Ahorro': ahorro,
                'Porcentaje_Ahorro': porcentaje_ahorro,
                'Conviene_Refinanciar': ahorro > 0
            }
            
            resultados_refi.append(resultado)
        
        df_refi = pd.DataFrame(resultados_refi)
        
        # Mostrar resumen
        conviene_count = df_refi['Conviene_Refinanciar'].sum()
        total_count = len(df_refi)
        
        print(f"\nüìä RESUMEN DE REFINANCIAMIENTO:")
        print("-" * 45)
        print(f"Pr√©stamos que conviene refinanciar: {conviene_count}/{total_count}")
        print(f"Ahorro total potencial: ${df_refi['Ahorro'].sum():,.0f}")
        print(f"Ahorro promedio: ${df_refi['Ahorro'].mean():,.0f}")
        
        # Mejores oportunidades
        if conviene_count > 0:
            print(f"\nüéØ MEJORES OPORTUNIDADES DE REFINANCIAMIENTO:")
            print("-" * 50)
            mejores = df_refi[df_refi['Conviene_Refinanciar']].nlargest(5, 'Ahorro')
            for _, row in mejores.iterrows():
                print(f"{row['Nombre']}: ${row['Ahorro']:,.0f} ({row['Porcentaje_Ahorro']:.1f}%)")
        
        return df_refi
    
    def crear_visualizaciones(self):
        """Crea todas las visualizaciones solicitadas."""
        if self.resultados is None:
            print("‚ùå Primero debe analizar los pr√©stamos")
            return
        
        # Configurar estilo
        plt.style.use('seaborn-v0_8')
        fig = plt.figure(figsize=(20, 15))
        
        # 1. Gr√°fico de barras: Costo total por persona
        plt.subplot(2, 3, 1)
        top_10 = self.resultados.nlargest(10, 'Costo_Total')
        plt.barh(range(len(top_10)), top_10['Costo_Total'])
        plt.yticks(range(len(top_10)), [name.split()[0] for name in top_10['Nombre']])
        plt.xlabel('Costo Total ($)')
        plt.title('Top 10 Pr√©stamos por Costo Total')
        plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e6:.1f}M'))
        
        # 2. Histograma: Distribuci√≥n de tasas de inter√©s
        plt.subplot(2, 3, 2)
        plt.hist(self.datos['Tasa_Interes_Anual'], bins=15, alpha=0.7, color='skyblue')
        plt.xlabel('Tasa de Inter√©s Anual (%)')
        plt.ylabel('Frecuencia')
        plt.title('Distribuci√≥n de Tasas de Inter√©s')
        
        # 3. Scatter plot: Monto vs Costo Total
        plt.subplot(2, 3, 3)
        plt.scatter(self.resultados['Monto_Original'], self.resultados['Costo_Total'], 
                   alpha=0.7, s=50)
        plt.xlabel('Monto Original ($)')
        plt.ylabel('Costo Total ($)')
        plt.title('Relaci√≥n Monto Original vs Costo Total')
        plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e6:.1f}M'))
        plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e6:.1f}M'))
        
        # 4. Gr√°fico de barras: Costo por prop√≥sito
        plt.subplot(2, 3, 4)
        costo_por_proposito = self.resultados.groupby('Proposito')['Costo_Total'].mean()
        plt.bar(range(len(costo_por_proposito)), costo_por_proposito.values)
        plt.xticks(range(len(costo_por_proposito)), 
                  [prop.replace(' ', '\n') for prop in costo_por_proposito.index], 
                  rotation=45, ha='right')
        plt.ylabel('Costo Promedio ($)')
        plt.title('Costo Promedio por Prop√≥sito')
        plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e6:.1f}M'))
        
        # 5. Evoluci√≥n del saldo para los primeros 5 pr√©stamos
        plt.subplot(2, 3, 5)
        for i in range(min(5, len(self.datos))):
            row = self.datos.iloc[i]
            saldo = row['Monto_Prestamo']
            pago_mensual = self.calcular_pago_mensual(
                row['Monto_Prestamo'], row['Tasa_Interes_Anual'], row['Tiempo_Meses']
            )
            tasa_mensual = row['Tasa_Interes_Anual'] / 100 / 12
            
            saldos = [saldo]
            for mes in range(row['Tiempo_Meses']):
                interes = saldo * tasa_mensual
                principal = pago_mensual - interes
                saldo = max(0, saldo - principal)
                saldos.append(saldo)
            
            plt.plot(saldos, label=row['Nombre'].split()[0], linewidth=2)
        
        plt.xlabel('Mes')
        plt.ylabel('Saldo Pendiente ($)')
        plt.title('Evoluci√≥n del Saldo - Primeros 5 Pr√©stamos')
        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e6:.1f}M'))
        
        # 6. Comparaci√≥n Inter√©s Simple vs Compuesto
        plt.subplot(2, 3, 6)
        diferencias = []
        nombres = []
        for index, row in self.datos.iterrows():
            calculo = self.calcular_interes_compuesto(
                row['Monto_Prestamo'], row['Tasa_Interes_Anual'], row['Tiempo_Meses']
            )
            diferencias.append(calculo['diferencia_compuesto_simple'])
            nombres.append(row['Nombre'].split()[0])
        
        plt.barh(range(len(diferencias)), diferencias)
        plt.yticks(range(len(diferencias)), nombres)
        plt.xlabel('Diferencia Compuesto - Simple ($)')
        plt.title('Diferencia: Inter√©s Compuesto vs Simple')
        plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x/1e3:.0f}K'))
        
        plt.tight_layout()
        plt.show()
        
        print("üìä Visualizaciones generadas exitosamente")
    
    def exportar_resultados(self, archivo_salida: str = "resultados_analisis.csv"):
        """
        Exporta todos los resultados a un archivo CSV.
        
        Args:
            archivo_salida (str): Nombre del archivo de salida
        """
        if self.resultados is None:
            print("‚ùå Primero debe analizar los pr√©stamos")
            return
        
        try:
            self.resultados.to_csv(archivo_salida, index=False)
            print(f"‚úÖ Resultados exportados exitosamente a '{archivo_salida}'")
            print(f"üìÅ Archivo contiene {len(self.resultados)} registros con {len(self.resultados.columns)} columnas")
        except Exception as e:
            print(f"‚ùå Error al exportar: {str(e)}")
    
    def generar_resumen_ejecutivo(self):
        """Genera un resumen ejecutivo con insights clave."""
        if self.resultados is None:
            print("‚ùå Primero debe analizar los pr√©stamos")
            return
        
        print("=" * 80)
        print("üìã RESUMEN EJECUTIVO - AN√ÅLISIS DE PR√âSTAMOS")
        print("=" * 80)
        
        # Estad√≠sticas generales
        total_prestamos = len(self.resultados)
        monto_total = self.resultados['Monto_Original'].sum()
        costo_total = self.resultados['Costo_Total'].sum()
        interes_total = self.resultados['Interes_Total'].sum()
        
        print(f"\nüìä ESTAD√çSTICAS GENERALES:")
        print("-" * 40)
        print(f"Total de pr√©stamos analizados: {total_prestamos}")
        print(f"Monto total prestado: ${monto_total:,.0f}")
        print(f"Costo total de todos los pr√©stamos: ${costo_total:,.0f}")
        print(f"Inter√©s total a pagar: ${interes_total:,.0f}")
        print(f"Tasa de inter√©s promedio: {self.datos['Tasa_Interes_Anual'].mean():.2f}%")
        
        # An√°lisis por prop√≥sito
        print(f"\nüéØ AN√ÅLISIS POR PROP√ìSITO:")
        print("-" * 40)
        analisis_proposito = self.resultados.groupby('Proposito').agg({
            'Monto_Original': ['count', 'sum', 'mean'],
            'Tasa_Interes': 'mean',
            'Costo_Total': 'sum'
        }).round(2)
        
        for proposito in analisis_proposito.index:
            count = analisis_proposito.loc[proposito, ('Monto_Original', 'count')]
            suma = analisis_proposito.loc[proposito, ('Monto_Original', 'sum')]
            tasa = analisis_proposito.loc[proposito, ('Tasa_Interes', 'mean')]
            print(f"{proposito}: {count} pr√©stamos, ${suma:,.0f} total, {tasa:.1f}% tasa promedio")
        
        # Pr√©stamos m√°s costosos
        print(f"\nüí∞ PR√âSTAMOS M√ÅS COSTOSOS:")
        print("-" * 40)
        top_costosos = self.resultados.nlargest(3, 'Costo_Total')
        for _, row in top_costosos.iterrows():
            print(f"{row['Nombre']}: ${row['Costo_Total']:,.0f} ({row['Proposito']})")
        
        # Oportunidades de ahorro
        print(f"\nüí° OPORTUNIDADES DE AHORRO:")
        print("-" * 40)
        tasas_altas = self.resultados[self.resultados['Tasa_Interes'] > 7.0]
        if len(tasas_altas) > 0:
            print(f"‚Ä¢ {len(tasas_altas)} pr√©stamos con tasas > 7% podr√≠an beneficiarse de refinanciamiento")
            ahorro_potencial = tasas_altas['Costo_Total'].sum() * 0.15  # Estimaci√≥n 15% ahorro
            print(f"‚Ä¢ Ahorro potencial estimado: ${ahorro_potencial:,.0f}")
        
        tiempos_largos = self.resultados[self.resultados['Tiempo_Meses'] > 60]
        if len(tiempos_largos) > 0:
            print(f"‚Ä¢ {len(tiempos_largos)} pr√©stamos a largo plazo podr√≠an beneficiarse de prepagos")
        
        print(f"\nüéØ RECOMENDACIONES:")
        print("-" * 40)
        print("‚Ä¢ Considerar refinanciamiento para pr√©stamos con tasas > 7%")
        print("‚Ä¢ Evaluar prepagos para pr√©stamos a largo plazo")
        print("‚Ä¢ Revisar opciones de consolidaci√≥n para m√∫ltiples pr√©stamos")
        print("‚Ä¢ Monitorear cambios en tasas de inter√©s del mercado")
    
    def calculadora_interactiva(self):
        """Calculadora interactiva para que el usuario ingrese sus propios valores."""
        print("=" * 80)
        print("üßÆ CALCULADORA INTERACTIVA DE PR√âSTAMOS")
        print("=" * 80)
        
        try:
            # Solicitar datos al usuario
            print("\nüìù Ingrese los datos del pr√©stamo:")
            monto = float(input("Monto del pr√©stamo ($): "))
            tasa = float(input("Tasa de inter√©s anual (%): "))
            tiempo = int(input("Tiempo en meses: "))
            
            # Validar datos
            if monto <= 0 or tasa < 0 or tiempo <= 0:
                print("‚ùå Error: Todos los valores deben ser positivos")
                return
            
            # Calcular resultados
            calculo = self.calcular_interes_compuesto(monto, tasa, tiempo)
            pago_mensual = self.calcular_pago_mensual(monto, tasa, tiempo)
            costo_total = pago_mensual * tiempo
            
            # Mostrar resultados
            print("\n" + "=" * 60)
            print("üìä RESULTADOS DE SU PR√âSTAMO")
            print("=" * 60)
            
            print(f"\nüí∞ INFORMACI√ìN DEL PR√âSTAMO:")
            print(f"Monto solicitado: ${monto:,.0f}")
            print(f"Tasa de inter√©s: {tasa}% anual")
            print(f"Plazo: {tiempo} meses ({tiempo/12:.1f} a√±os)")
            
            print(f"\nüìà C√ÅLCULOS FINANCIEROS:")
            print(f"Pago mensual: ${pago_mensual:,.0f}")
            print(f"Costo total: ${costo_total:,.0f}")
            print(f"Inter√©s total: ${costo_total - monto:,.0f}")
            print(f"Porcentaje de inter√©s: {((costo_total - monto) / monto) * 100:.1f}%")
            
            print(f"\nüîç AN√ÅLISIS DETALLADO:")
            print(f"Monto con inter√©s compuesto: ${calculo['monto_final']:,.0f}")
            print(f"Diferencia vs inter√©s simple: ${calculo['diferencia_compuesto_simple']:,.0f}")
            
            # Comparar con diferentes frecuencias
            print(f"\nüìä COMPARACI√ìN POR FRECUENCIA DE CAPITALIZACI√ìN:")
            frecuencias = [1, 2, 4, 12]
            for freq in frecuencias:
                calc_freq = self.calcular_interes_compuesto(monto, tasa, tiempo, freq)
                print(f"{calc_freq['frecuencia_nombre']}: ${calc_freq['monto_final']:,.0f}")
            
        except ValueError:
            print("‚ùå Error: Por favor ingrese valores num√©ricos v√°lidos")
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
    
    def menu_principal(self):
        """Men√∫ principal interactivo."""
        print("=" * 80)
        print("üè¶ CALCULADORA DE INTER√âS COMPUESTO - AN√ÅLISIS DE PR√âSTAMOS")
        print("=" * 80)
        
        while True:
            print("\nüìã MEN√ö PRINCIPAL:")
            print("-" * 40)
            print("1. üìä Cargar y analizar archivo de pr√©stamos")
            print("2. üßÆ Calcular inter√©s compuesto para todos")
            print("3. üîÆ Escenarios de simulaci√≥n")
            print("4. üìà Generar visualizaciones")
            print("5. üìÅ Exportar resultados")
            print("6. üßÆ Calculadora interactiva")
            print("7. üìã Resumen ejecutivo")
            print("8. üîç Ejemplos detallados")
            print("0. üö™ Salir")
            
            try:
                opcion = input("\nSeleccione una opci√≥n: ")
                
                if opcion == "1":
                    if self.cargar_datos():
                        self.analizar_todos_prestamos()
                
                elif opcion == "2":
                    if self.datos is not None:
                        self.analizar_todos_prestamos()
                        print("‚úÖ An√°lisis completado")
                    else:
                        print("‚ùå Primero debe cargar los datos (opci√≥n 1)")
                
                elif opcion == "3":
                    if self.datos is not None:
                        print("\nüîÆ ESCENARIOS DISPONIBLES:")
                        print("1. ¬øQu√© pasar√≠a si cambian las tasas?")
                        print("2. Escenario de prepago")
                        print("3. An√°lisis de refinanciamiento")
                        
                        sub_opcion = input("\nSeleccione un escenario: ")
                        if sub_opcion == "1":
                            self.escenario_que_pasaria_si()
                        elif sub_opcion == "2":
                            self.escenario_prepago()
                        elif sub_opcion == "3":
                            self.escenario_refinanciamiento()
                    else:
                        print("‚ùå Primero debe cargar los datos (opci√≥n 1)")
                
                elif opcion == "4":
                    if self.resultados is not None:
                        self.crear_visualizaciones()
                    else:
                        print("‚ùå Primero debe analizar los pr√©stamos (opci√≥n 2)")
                
                elif opcion == "5":
                    if self.resultados is not None:
                        archivo = input("Nombre del archivo (o Enter para 'resultados_analisis.csv'): ")
                        if not archivo:
                            archivo = "resultados_analisis.csv"
                        self.exportar_resultados(archivo)
                    else:
                        print("‚ùå Primero debe analizar los pr√©stamos (opci√≥n 2)")
                
                elif opcion == "6":
                    self.calculadora_interactiva()
                
                elif opcion == "7":
                    self.generar_resumen_ejecutivo()
                
                elif opcion == "8":
                    self.mostrar_ejemplos_detallados()
                
                elif opcion == "0":
                    print("\nüëã ¬°Gracias por usar la Calculadora de Pr√©stamos!")
                    print("üéì Esperamos que esta herramienta haya sido educativa")
                    break
                
                else:
                    print("‚ùå Opci√≥n no v√°lida. Por favor seleccione una opci√≥n del men√∫.")
                
            except KeyboardInterrupt:
                print("\n\nüëã ¬°Hasta luego!")
                break
            except Exception as e:
                print(f"‚ùå Error: {str(e)}")


def main():
    """Funci√≥n principal del programa."""
    calculadora = CalculadoraPrestamos()
    calculadora.menu_principal()

    if __name__ == "__main__":
        main()

        return jsonify({'message': 'This is function three.'})
